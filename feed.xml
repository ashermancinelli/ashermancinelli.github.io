<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-06-04T16:07:28-07:00</updated><id>/feed.xml</id><title type="html">Asher Mancinelli</title><subtitle>Mostly C++ and Compilers</subtitle><entry><title type="html">Understanding VLA</title><link href="/vla-c" rel="alternate" type="text/html" title="Understanding VLA" /><published>2023-06-01T00:00:00-07:00</published><updated>2023-06-01T00:00:00-07:00</updated><id>/C-VLA-Implementation</id><content type="html" xml:base="/vla-c"><![CDATA[<p>Scattered notes from learning about the implementation of VLA.</p>

<font size="-1">
  <em>
    These views do not in any way represent those of NVIDIA or any other organization or institution that I am professionally associated with.
    These views are entirely my own.
  </em>
</font>

<h2 id="what-is-vla">What is VLA?</h2>

<p>Variable-length arrays are dynamic, stack-allocated arrays.
The compiler needs to increase the stack size in the current stack frame to allocate enough space for the array.
Assuming negative stack-growth like on x86, the compiler will decrease the stack pointer sufficiently to store the array.</p>

<p>This is almost identical to <code class="language-plaintext highlighter-rouge">alloca</code>.
Both <code class="language-plaintext highlighter-rouge">alloca</code> and VLAs are essentially primitives to modify the stack pointer.</p>

<p>Eg:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// Subtracts N from current stack pointer returns sp </span>
  <span class="kt">int</span> <span class="o">*</span><span class="n">curr_sp</span> <span class="o">=</span> <span class="n">alloca</span><span class="p">(</span><span class="n">N</span> <span class="o">*</span> <span class="nf">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>

  <span class="c1">// equivilant to</span>
  <span class="kt">int</span> <span class="n">curr_sp</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
</code></pre></div></div>

<p><a href="https://stackoverflow.com/questions/3488821/is-alloca-completely-replaceable">One key difference between the two:</a></p>
<blockquote>
  <p>The memory alloca() returns is valid as long as the current function persists. The lifetime of the memory occupied by a VLA is valid as long as the VLA’s identifier remains in scope. You can <code class="language-plaintext highlighter-rouge">alloca</code> memory in a loop for example and use the memory outside the loop, a VLA would be gone because the identifier goes out of scope when the loop terminates.</p>
</blockquote>

<h2 id="memory-layout">Memory Layout</h2>

<p>Because the stack grows down on most platforms, the stack pointer after an <code class="language-plaintext highlighter-rouge">alloca</code> or VLA allocation but arrays are addressed sequentially upwards, the address of the first element of a VLA array (or the pointer returned by <code class="language-plaintext highlighter-rouge">alloca</code>) will be the value of the stack pointer <em>after</em> it’s modified.</p>

<center>
  <img style="background-color:#240057;" src="/images/vla/vla-stack-pointer-viz.drawio.png" />
</center>

<p>Element 0 of the array or <code class="language-plaintext highlighter-rouge">alloca</code>-allocated memory is therefore immediately above the stack pointer after allocation, and is addressed by increasing sequentially until the end of the array.
Accessing past the array will then run into previously declared stack variables.</p>

<p>When the function returns, the stack space will be available for subsequent function calls to use automatically, so there is no need to explicitly free memory allocated by VLA/<code class="language-plaintext highlighter-rouge">alloca</code>.</p>

<h2 id="examples">Examples</h2>

<p>GCC docs:</p>
<blockquote>
  <p>These arrays are declared like any other automatic arrays, but with a length that is not a constant expression. The storage is allocated at the point of declaration and deallocated when the block scope containing the declaration exits.</p>
</blockquote>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ./vla &lt;size&gt;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
  <span class="kt">int</span> <span class="n">array</span><span class="p">[</span><span class="n">len</span><span class="p">];</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Declaring the array decrements the stack pointer enough to provide memory for the array:
<!--
gcc _includes/vla/inspect-stack.c && LEN=10 IDX=4 ./a.out
--></p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdint.h&gt;</span><span class="cp">
</span>
<span class="cp">#define SAVESTACK(X) asm( "mov %%rsp, %0" : "=rm" ( X ));
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">getenv</span><span class="p">(</span><span class="s">"LEN"</span><span class="p">));</span>
  <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">getenv</span><span class="p">(</span><span class="s">"IDX"</span><span class="p">));</span>
  <span class="k">register</span> <span class="kt">uint64_t</span> <span class="n">sp0</span><span class="p">,</span> <span class="n">sp1</span><span class="p">;</span>

  <span class="n">SAVESTACK</span><span class="p">(</span><span class="n">sp0</span><span class="p">);</span>

  <span class="kt">int</span> <span class="n">vla</span><span class="p">[</span><span class="n">len</span><span class="p">];</span>

  <span class="n">SAVESTACK</span><span class="p">(</span><span class="n">sp1</span><span class="p">);</span>

  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="n">vla</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>

  <span class="n">printf</span><span class="p">(</span><span class="s">"&amp;vla[0]: %ld</span><span class="se">\n</span><span class="s">before: %ld</span><span class="se">\n</span><span class="s">after: %ld</span><span class="se">\n</span><span class="s">diff: %ld</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="p">(</span><span class="kt">uint64_t</span><span class="p">)</span><span class="o">&amp;</span><span class="n">vla</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">sp0</span><span class="p">,</span> <span class="n">sp1</span><span class="p">,</span> <span class="n">sp0</span><span class="o">-</span><span class="n">sp1</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">vla</span><span class="p">[</span><span class="n">idx</span><span class="p">];</span>
<span class="p">}</span>

</code></pre></div></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">uname</span> <span class="nt">-a</span>
Linux carbon 5.15.0-71-generic <span class="c">#78-Ubuntu SMP Tue Apr 18 09:00:29 UTC 2023 x86_64 x86_64 x86_64 GNU/Linux</span>
<span class="nv">$ </span>gcc inspect-stack-vla.c <span class="o">&amp;&amp;</span> <span class="nv">LEN</span><span class="o">=</span>10 <span class="nv">IDX</span><span class="o">=</span>4 ./a.out
&amp;vla[0]: 140737151458112
before: 140737151458160
after: 140737151458112
diff: 48
</code></pre></div></div>

<p>Notice that the address stored in the stack pointer after declaring the VLA array is the same as the address of the first element of the VLA array as depicted in the diagram above.</p>

<h2 id="alloca"><code class="language-plaintext highlighter-rouge">alloca</code></h2>

<p>Instead of declaring a VLA array, we can create a pointer to memory allocated by <code class="language-plaintext highlighter-rouge">alloca</code> to produce the same effect:
<!--
gcc _includes/vla/inspect-stack-alloca.c && LEN=10 IDX=4 ./a.out
--></p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdint.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;alloca.h&gt;</span><span class="cp">
</span>
<span class="cp">#define SAVESTACK(X) asm( "mov %%rsp, %0" : "=rm" ( X ));
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">getenv</span><span class="p">(</span><span class="s">"LEN"</span><span class="p">));</span>
  <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">getenv</span><span class="p">(</span><span class="s">"IDX"</span><span class="p">));</span>
  <span class="k">register</span> <span class="kt">uint64_t</span> <span class="n">sp0</span><span class="p">,</span> <span class="n">sp1</span><span class="p">;</span>

  <span class="n">SAVESTACK</span><span class="p">(</span><span class="n">sp0</span><span class="p">);</span>

  <span class="c1">// int vla[len];</span>
  <span class="kt">int</span><span class="o">*</span> <span class="n">vla</span> <span class="o">=</span> <span class="n">alloca</span><span class="p">(</span><span class="n">len</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>

  <span class="n">SAVESTACK</span><span class="p">(</span><span class="n">sp1</span><span class="p">);</span>

  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="n">vla</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>

  <span class="n">printf</span><span class="p">(</span><span class="s">"&amp;vla[0]: %ld</span><span class="se">\n</span><span class="s">before: %ld</span><span class="se">\n</span><span class="s">after: %ld</span><span class="se">\n</span><span class="s">diff: %ld</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="p">(</span><span class="kt">uint64_t</span><span class="p">)</span><span class="o">&amp;</span><span class="n">vla</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">sp0</span><span class="p">,</span> <span class="n">sp1</span><span class="p">,</span> <span class="n">sp0</span><span class="o">-</span><span class="n">sp1</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">vla</span><span class="p">[</span><span class="n">idx</span><span class="p">];</span>
<span class="p">}</span>

</code></pre></div></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>gcc inspect-stack-alloca.c <span class="o">&amp;&amp;</span> <span class="nv">LEN</span><span class="o">=</span>10 <span class="nv">IDX</span><span class="o">=</span>4 ./a.out
&amp;vla[0]: 140728646054592
before: 140728646054640
after: 140728646054592
diff: 48
</code></pre></div></div>

<p>Compare the GCC docs for <code class="language-plaintext highlighter-rouge">alloca</code> with that of variable length arrays and notice the similarities:</p>

<blockquote>
  <p>The function alloca supports a kind of half-dynamic allocation in which blocks are allocated dynamically but freed automatically.</p>

  <p>Allocating a block with alloca is an explicit action; you can allocate as many blocks as you wish, and compute the size at run time. But all the blocks are freed when you exit the function that alloca was called from, just as if they were automatic variables declared in that function. There is no way to free the space explicitly.</p>
</blockquote>

<h2 id="llvm-ir">LLVM IR</h2>

<p>Docs explanation of alloca:</p>

<blockquote>
  <p>The ‘alloca’ instruction allocates memory on the stack frame of the currently executing function, to be automatically released when this function returns to its caller</p>
</blockquote>

<!--
clang -S -emit-llvm -o - _includes/vla/simple.c
-->
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="cm">/* Contrived example that uses VLA */</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">getenv</span><span class="p">(</span><span class="s">"LEN"</span><span class="p">));</span>
  <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">getenv</span><span class="p">(</span><span class="s">"IDX"</span><span class="p">));</span>
  <span class="kt">int</span> <span class="n">vla</span><span class="p">[</span><span class="n">len</span><span class="p">];</span>
  <span class="k">return</span> <span class="n">vla</span><span class="p">[</span><span class="n">idx</span><span class="p">];</span>
<span class="p">}</span>

</code></pre></div></div>
<div class="language-llvm highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="vg">@.str</span> <span class="p">=</span> <span class="k">private</span> <span class="k">unnamed_addr</span> <span class="k">constant</span> <span class="p">[</span><span class="m">4</span> <span class="p">x</span> <span class="kt">i8</span><span class="p">]</span> <span class="s">c"LEN\00"</span><span class="p">,</span> <span class="k">align</span> <span class="m">1</span>
<span class="vg">@.str.1</span> <span class="p">=</span> <span class="k">private</span> <span class="k">unnamed_addr</span> <span class="k">constant</span> <span class="p">[</span><span class="m">4</span> <span class="p">x</span> <span class="kt">i8</span><span class="p">]</span> <span class="s">c"IDX\00"</span><span class="p">,</span> <span class="k">align</span> <span class="m">1</span>

<span class="k">define</span> <span class="k">dso_local</span> <span class="kt">i32</span> <span class="vg">@main</span><span class="p">(</span><span class="kt">i32</span> <span class="k">noundef</span> <span class="nv">%0</span><span class="p">,</span> <span class="kt">i8</span><span class="p">**</span> <span class="k">noundef</span> <span class="nv">%1</span><span class="p">)</span> <span class="vg">#0</span> <span class="p">{</span>
  <span class="nv">%3</span> <span class="p">=</span> <span class="k">alloca</span> <span class="kt">i32</span><span class="p">,</span> <span class="k">align</span> <span class="m">4</span>
  <span class="nv">%4</span> <span class="p">=</span> <span class="k">alloca</span> <span class="kt">i32</span><span class="p">,</span> <span class="k">align</span> <span class="m">4</span>
  <span class="nv">%5</span> <span class="p">=</span> <span class="k">alloca</span> <span class="kt">i8</span><span class="p">**,</span> <span class="k">align</span> <span class="m">8</span>
  <span class="nv">%6</span> <span class="p">=</span> <span class="k">alloca</span> <span class="kt">i32</span><span class="p">,</span> <span class="k">align</span> <span class="m">4</span>
  <span class="nv">%7</span> <span class="p">=</span> <span class="k">alloca</span> <span class="kt">i32</span><span class="p">,</span> <span class="k">align</span> <span class="m">4</span>
  <span class="nv">%8</span> <span class="p">=</span> <span class="k">alloca</span> <span class="kt">i8</span><span class="p">*,</span> <span class="k">align</span> <span class="m">8</span>
  <span class="nv">%9</span> <span class="p">=</span> <span class="k">alloca</span> <span class="kt">i64</span><span class="p">,</span> <span class="k">align</span> <span class="m">8</span>
  <span class="k">store</span> <span class="kt">i32</span> <span class="m">0</span><span class="p">,</span> <span class="kt">i32</span><span class="p">*</span> <span class="nv">%3</span><span class="p">,</span> <span class="k">align</span> <span class="m">4</span>
  <span class="k">store</span> <span class="kt">i32</span> <span class="nv">%0</span><span class="p">,</span> <span class="kt">i32</span><span class="p">*</span> <span class="nv">%4</span><span class="p">,</span> <span class="k">align</span> <span class="m">4</span>
  <span class="k">store</span> <span class="kt">i8</span><span class="p">**</span> <span class="nv">%1</span><span class="p">,</span> <span class="kt">i8</span><span class="p">***</span> <span class="nv">%5</span><span class="p">,</span> <span class="k">align</span> <span class="m">8</span>
  <span class="nv">%10</span> <span class="p">=</span> <span class="k">call</span> <span class="kt">i8</span><span class="p">*</span> <span class="vg">@getenv</span><span class="p">(</span><span class="kt">i8</span><span class="p">*</span> <span class="k">noundef</span> <span class="k">getelementptr</span> <span class="k">inbounds</span> <span class="p">([</span><span class="m">4</span> <span class="p">x</span> <span class="kt">i8</span><span class="p">],</span> <span class="p">[</span><span class="m">4</span> <span class="p">x</span> <span class="kt">i8</span><span class="p">]*</span> <span class="vg">@.str</span><span class="p">,</span> <span class="kt">i64</span> <span class="m">0</span><span class="p">,</span> <span class="kt">i64</span> <span class="m">0</span><span class="p">))</span> <span class="vg">#4</span>
  <span class="nv">%11</span> <span class="p">=</span> <span class="k">call</span> <span class="kt">i32</span> <span class="vg">@atoi</span><span class="p">(</span><span class="kt">i8</span><span class="p">*</span> <span class="k">noundef</span> <span class="nv">%10</span><span class="p">)</span> <span class="vg">#5</span>
  <span class="k">store</span> <span class="kt">i32</span> <span class="nv">%11</span><span class="p">,</span> <span class="kt">i32</span><span class="p">*</span> <span class="nv">%6</span><span class="p">,</span> <span class="k">align</span> <span class="m">4</span>
  <span class="nv">%12</span> <span class="p">=</span> <span class="k">call</span> <span class="kt">i8</span><span class="p">*</span> <span class="vg">@getenv</span><span class="p">(</span><span class="kt">i8</span><span class="p">*</span> <span class="k">noundef</span> <span class="k">getelementptr</span> <span class="k">inbounds</span> <span class="p">([</span><span class="m">4</span> <span class="p">x</span> <span class="kt">i8</span><span class="p">],</span> <span class="p">[</span><span class="m">4</span> <span class="p">x</span> <span class="kt">i8</span><span class="p">]*</span> <span class="vg">@.str.1</span><span class="p">,</span> <span class="kt">i64</span> <span class="m">0</span><span class="p">,</span> <span class="kt">i64</span> <span class="m">0</span><span class="p">))</span> <span class="vg">#4</span>
  <span class="nv">%13</span> <span class="p">=</span> <span class="k">call</span> <span class="kt">i32</span> <span class="vg">@atoi</span><span class="p">(</span><span class="kt">i8</span><span class="p">*</span> <span class="k">noundef</span> <span class="nv">%12</span><span class="p">)</span> <span class="vg">#5</span>
  <span class="k">store</span> <span class="kt">i32</span> <span class="nv">%13</span><span class="p">,</span> <span class="kt">i32</span><span class="p">*</span> <span class="nv">%7</span><span class="p">,</span> <span class="k">align</span> <span class="m">4</span>
  <span class="nv">%14</span> <span class="p">=</span> <span class="k">load</span> <span class="kt">i32</span><span class="p">,</span> <span class="kt">i32</span><span class="p">*</span> <span class="nv">%6</span><span class="p">,</span> <span class="k">align</span> <span class="m">4</span>
  <span class="nv">%15</span> <span class="p">=</span> <span class="k">zext</span> <span class="kt">i32</span> <span class="nv">%14</span> <span class="k">to</span> <span class="kt">i64</span>

  <span class="nv">%16</span> <span class="p">=</span> <span class="k">call</span> <span class="kt">i8</span><span class="p">*</span> <span class="vg">@llvm.stacksave</span><span class="p">()</span>

  <span class="k">store</span> <span class="kt">i8</span><span class="p">*</span> <span class="nv">%16</span><span class="p">,</span> <span class="kt">i8</span><span class="p">**</span> <span class="nv">%8</span><span class="p">,</span> <span class="k">align</span> <span class="m">8</span>
  <span class="nv">%17</span> <span class="p">=</span> <span class="k">alloca</span> <span class="kt">i32</span><span class="p">,</span> <span class="kt">i64</span> <span class="nv">%15</span><span class="p">,</span> <span class="k">align</span> <span class="m">16</span>
        <span class="err">^^^^^^^^^^</span> <span class="err">Dynamically</span> <span class="err">allocate</span> <span class="err">more</span> <span class="err">memory</span> <span class="err">on</span> <span class="err">the</span> <span class="err">stack</span> <span class="err">by</span> <span class="err">decrementing</span>
                   <span class="err">the</span> <span class="err">stack</span> <span class="err">pointer</span><span class="p">,</span> <span class="err">giving</span> <span class="err">sufficient</span> <span class="err">space</span> <span class="err">for</span> <span class="err">the</span> <span class="err">array</span>

  <span class="k">store</span> <span class="kt">i64</span> <span class="nv">%15</span><span class="p">,</span> <span class="kt">i64</span><span class="p">*</span> <span class="nv">%9</span><span class="p">,</span> <span class="k">align</span> <span class="m">8</span>
  <span class="nv">%18</span> <span class="p">=</span> <span class="k">load</span> <span class="kt">i32</span><span class="p">,</span> <span class="kt">i32</span><span class="p">*</span> <span class="nv">%7</span><span class="p">,</span> <span class="k">align</span> <span class="m">4</span>
  <span class="nv">%19</span> <span class="p">=</span> <span class="k">sext</span> <span class="kt">i32</span> <span class="nv">%18</span> <span class="k">to</span> <span class="kt">i64</span>
  <span class="nv">%20</span> <span class="p">=</span> <span class="k">getelementptr</span> <span class="k">inbounds</span> <span class="kt">i32</span><span class="p">,</span> <span class="kt">i32</span><span class="p">*</span> <span class="nv">%17</span><span class="p">,</span> <span class="kt">i64</span> <span class="nv">%19</span>
  <span class="nv">%21</span> <span class="p">=</span> <span class="k">load</span> <span class="kt">i32</span><span class="p">,</span> <span class="kt">i32</span><span class="p">*</span> <span class="nv">%20</span><span class="p">,</span> <span class="k">align</span> <span class="m">4</span>
  <span class="k">store</span> <span class="kt">i32</span> <span class="nv">%21</span><span class="p">,</span> <span class="kt">i32</span><span class="p">*</span> <span class="nv">%3</span><span class="p">,</span> <span class="k">align</span> <span class="m">4</span>
  <span class="nv">%22</span> <span class="p">=</span> <span class="k">load</span> <span class="kt">i8</span><span class="p">*,</span> <span class="kt">i8</span><span class="p">**</span> <span class="nv">%8</span><span class="p">,</span> <span class="k">align</span> <span class="m">8</span>
  <span class="k">call</span> <span class="kt">void</span> <span class="vg">@llvm.stackrestore</span><span class="p">(</span><span class="kt">i8</span><span class="p">*</span> <span class="nv">%22</span><span class="p">)</span>
  <span class="nv">%23</span> <span class="p">=</span> <span class="k">load</span> <span class="kt">i32</span><span class="p">,</span> <span class="kt">i32</span><span class="p">*</span> <span class="nv">%3</span><span class="p">,</span> <span class="k">align</span> <span class="m">4</span>
  <span class="k">ret</span> <span class="kt">i32</span> <span class="nv">%23</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="conclusion--links">Conclusion &amp; Links</h2>

<ol>
  <li><a href="https://gcc.gnu.org/onlinedocs/gcc/Variable-Length.html">GCC VLA docs</a></li>
  <li><a href="https://www.gnu.org/software/libc/manual/html_node/Alloca-Example.html">GCC <code class="language-plaintext highlighter-rouge">alloca</code> docs</a></li>
  <li><a href="https://llvm.org/docs/LangRef.html#alloca-instruction">LLVM IR docs for <code class="language-plaintext highlighter-rouge">alloca</code> instruction</a></li>
  <li><a href="https://llvm.org/doxygen/Instructions_8cpp_source.html">LLVM source for <code class="language-plaintext highlighter-rouge">alloca</code> instruction</a></li>
  <li><a href="https://en.cppreference.com/w/c/language/array">cppreference docs on VLA</a></li>
  <li><a href="https://www.tenouk.com/Bufferoverflowc/Bufferoverflow2a.html">Buffer overflow and stack frame visualization</a></li>
</ol>

<font size="-1">
  <em>
    These views do not in any way represent those of NVIDIA or any other organization or institution that I am professionally associated with.
    These views are entirely my own.
  </em>
</font>]]></content><author><name></name></author><category term="c++" /><summary type="html"><![CDATA[Scattered notes from learning about the implementation of VLA.]]></summary></entry><entry><title type="html">Debugging Performance in Compilers</title><link href="/comp-debug-perf" rel="alternate" type="text/html" title="Debugging Performance in Compilers" /><published>2022-12-12T00:00:00-08:00</published><updated>2022-12-12T00:00:00-08:00</updated><id>/Compiler-Perf-Debugging</id><content type="html" xml:base="/comp-debug-perf"><![CDATA[<p>Overview of how I debug performance regressions when developing a compiler.
I don’t claim this is the best way to do it, email me or tweet at me if you’ve got better ideas😉</p>

<font size="-1">
  <em>
    These views do not in any way represent those of NVIDIA or any other organization or institution that I am professionally associated with.
    These views are entirely my own.
  </em>
</font>

<h2 id="starting-point">Starting Point</h2>

<p>Compilers are very complicated and the results can be surprising.
Sometimes performance issues only show up in large scale real-world applications.
How do you go about debugging such an issue?</p>

<p>As you might expect, narrowing down the issue to be minimal and reproducible is the first task.
Ideally, we narrow the performance regression down to a single translation unit, though sometimes this isn’t enough.
For this post, we’ll assume that the bulk of the performance regression you see in your application is coming from one translation unit, and that you know which patch is causing the regression (if you don’t know which patch is causing the regression… well you can bisect the recent patches too😁).</p>

<h2 id="bisecting-the-object-files">Bisecting the Object Files</h2>

<p>Assume we have two compilers: compiler A which doesn’t have the “bad” changes (the “good” compiler), and compiler B which does (the “bad” compiler).
We’ll start by building the application with both compilers, building half of the object files with compiler A and half with compiler B.
Say we have 100 object files that are linked into the application; we’d build the first 50 with compiler A and the second 50 with compiler B.</p>

<p>If the perf regression isn’t observed after you re-link all the object files into the application, then we know the bulk of the issue is in the object files that were just built with compiler A.
We can then rebuild all the object files in the second 50 with compiler A and build object files 26-50 or 1-25 with compiler B.
In this way, we bisect all the translation units until we find the single TU with the largest impact on performance.</p>

<p>This can be really tedious and manual, but it’s not too hard to script😉.</p>

<h2 id="bisecting-the-source-file">Bisecting the Source File</h2>

<p>Now that we’ve narrowed our regression down to a single TU, our work gets a little more complicated.
We can use the same bisection process as before, but this time we’ll have to do it on a single file.
To acomplish this, we’ll have to figure out which parts of the source file depend on each other so we can break it into two new source files, one to be built with compiler A and one to be built with compiler B (all other TUs being built with the “good” compiler).</p>

<p>Depending on the situation you may create two source files, each with half of the content of the original, or maybe you’ll use the same source file but use macro guards so each compiler only builds half of the source, eg:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* includes, declarations, and global defs up here */</span>

<span class="cp">#ifdef COMPILERA
</span><span class="c1">// stuff built with the good compiler...</span>
<span class="cp">#else </span><span class="cm">/* COMPILERB */</span><span class="cp">
</span><span class="c1">// stuff built with the bad compiler...</span>
<span class="cp">#endif
</span></code></pre></div></div>

<p>You may then add <code class="language-plaintext highlighter-rouge">-DCOMPILERA</code> to the invokation of compiler A so each compiler only builds half of the TU in question.
Again, if we don’t see the perf regression, we swap the macro guards and try again.
We then have compiler B build a quarter of the original TU and have compiler A build the other 3/4ths, and see if we observe the regression, etc etc.
Ideally, at the end of this process we know exactly which function(s) are causing the regression.</p>

<h2 id="what-next">What Next?</h2>

<p>After we’ve narrowed the regression down to a function or two (🤞) things can get tricky, and very much depends on the nature of the changes that caused the regression.</p>

<p>At this point I think it’s best to ask some questions:</p>

<ul>
  <li>Was the patch in question related to a specific pass?
    <ul>
      <li>Can the effects of that pass be seen in the function(s) we found to be causing the regression?</li>
      <li>Is the regression observed when the pass is disabled?</li>
    </ul>
  </li>
  <li>Do you notice any obvious differences between the IR the compilers generate for the identified functions?
    <ul>
      <li>Can you use those differences to work backwards to the code that generated that IR?</li>
    </ul>
  </li>
  <li>If you enable lots of debugging output (like dumping all the <code class="language-plaintext highlighter-rouge">opt</code> pass remarks) and build with compilers A and B and then diff the output, are there any glaring differences? Maybe an earlier change allowed another pass (uninvolved in the patch) to perform some transformations it otherwise would not, or maybe vice-versa.</li>
</ul>

<h2 id="why-might-this-not-work">Why Might This Not Work?</h2>

<p>Sometimes the effects only occur in a short function that is always inlined, in which case you might not find a specific TU or set of functions at the root of the regression; for this reason, you might want to crank the inlining pass down as low as it goes to help you narrow down the issue.
It’s often best to use the fewest optimizations possible when debugging this sort of thing (so long as you still observe the behavior).
<!--
--></p>]]></content><author><name></name></author><category term="c++, llvm, compilers" /><summary type="html"><![CDATA[Overview of how I debug performance regressions when developing a compiler. I don’t claim this is the best way to do it, email me or tweet at me if you’ve got better ideas😉]]></summary></entry><entry><title type="html">TBAA in LLVM IR</title><link href="/llvm-tbaa" rel="alternate" type="text/html" title="TBAA in LLVM IR" /><published>2022-12-02T00:00:00-08:00</published><updated>2022-12-02T00:00:00-08:00</updated><id>/LLVM-TBAA</id><content type="html" xml:base="/llvm-tbaa"><![CDATA[<p>Overview of type-based alias analysis in LLMV IR.</p>

<font size="-1">
  <em>
    These views do not in any way represent those of NVIDIA or any other organization or institution that I am professionally associated with.
    These views are entirely my own.
  </em>
</font>

<h2 id="llvm-alias-analysis">LLVM Alias Analysis</h2>

<p>Alias analysis answers the question “do these two addresses alias each other?” with three possible responses.
Two addresses either <code class="language-plaintext highlighter-rouge">MayAlias</code>, <code class="language-plaintext highlighter-rouge">MustAlias</code>, or they do <code class="language-plaintext highlighter-rouge">NotAlias</code> (which is how they are spelled in the LLVM alias analysis api).</p>

<p>Alias analyses can take into account lots of factors (control flow, field analysis (when analyzing structures), etc), but we’re only talking about <em>type-based</em> alias analysis (TBAA).</p>

<p>TBAA leverages the rules in the type system of the given programming language to prove something about the aliasing relationship between two addresses.</p>

<h2 id="llvm-tbaa-metadata">LLVM TBAA Metadata</h2>

<div class="language-llvm highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>

<h2 id="what-is-tbaa">What is TBAA</h2>

<h2 id="links">Links</h2>

<ul>
  <li><a target="blank" href="https://llvm.org/docs/LangRef.html#tbaa-metadata">LLVM TBAA metadata docs</a></li>
  <li><a target="blank" href="https://releases.llvm.org/8.0.0/docs/AliasAnalysis.html">LLVM alias analysis docs</a></li>
  <li><a href="https://www.cs.cornell.edu/courses/cs6120/2020fa/lesson/9/" target="blank">Cornell alias analysis slides</a></li>
  <li><a target="blank" href="https://www.researchgate.net/publication/234027199_A_Formally-Verified_Alias_Analysis">Formally Verified Alias Analysis</a></li>
  <li><a href="https://stefansf.de/c-quiz/" target="blank">Type-Based Alias Analysis in C by Stephan</a></li>
  <li><a href="https://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html" target="blank">LLMV blog: What Every C Programmer Should Know by Chris Lattner</a></li>
</ul>]]></content><author><name></name></author><category term="c++, llvm, compilers" /><summary type="html"><![CDATA[Overview of type-based alias analysis in LLMV IR.]]></summary></entry><entry><title type="html">Provable Optimizations in Coq</title><link href="/prov-opt-coq" rel="alternate" type="text/html" title="Provable Optimizations in Coq" /><published>2022-10-06T00:00:00-07:00</published><updated>2022-10-06T00:00:00-07:00</updated><id>/Provable-Optimizations</id><content type="html" xml:base="/prov-opt-coq"><![CDATA[<p>Proving that optimization passes are correct with the formal verification
assistant Coq.</p>

<font size="-1">
  <em>
    These views do not in any way represent those of NVIDIA or any other organization or institution that I am professionally associated with.
    These views are entirely my own.
  </em>
</font>

<h1 id="what-is-coq">What is Coq?</h1>

<p>It’s a programming language to help the programmer prove things.</p>]]></content><author><name></name></author><category term="c++, metaprogramming" /><summary type="html"><![CDATA[Proving that optimization passes are correct with the formal verification assistant Coq.]]></summary></entry><entry><title type="html">Slaughterhouse Five</title><link href="/sl5" rel="alternate" type="text/html" title="Slaughterhouse Five" /><published>2022-05-14T00:00:00-07:00</published><updated>2022-05-14T00:00:00-07:00</updated><id>/Slaughterhouse-5</id><content type="html" xml:base="/sl5"><![CDATA[<p>Significant quotes and reflections from reading Slaughterhouse 5 by Kurt Vonnegut.</p>

<h1 id="slaughterhouse-five">Slaughterhouse Five</h1>]]></content><author><name></name></author><summary type="html"><![CDATA[Significant quotes and reflections from reading Slaughterhouse 5 by Kurt Vonnegut.]]></summary></entry><entry><title type="html">Worth Being Wrong</title><link href="/rel-wbw" rel="alternate" type="text/html" title="Worth Being Wrong" /><published>2022-05-14T00:00:00-07:00</published><updated>2022-05-14T00:00:00-07:00</updated><id>/Worth-Being-Wrong</id><content type="html" xml:base="/rel-wbw"><![CDATA[<p>What is worth living for? How much of my life should be spent to figuring out what’s technically correct when I could be using my time to help the material conditions of my neighbor?</p>

<h1 id="whats-worth-being-wrong-about">What’s Worth Being Wrong About?</h1>

<p>I was given a set of ideas to see the world through, a toolbox for interacting with ideas and experiences.
This toolbox fell short a long time ago for many reasons which won’t be enumerated here.</p>

<p>The castle of ideas was built up in my mind over many years, and in a few short years I tore many of those walls down.
Since then, I’ve been rebuilding, reconstructing, tearing down again, and rebuilding some more.
I guess this is just a dialectic - not all that special.</p>

<p>I only have so much time and energy in this life, and I can keep building and tearing down again, or I can lift my eyes to the material conditions of my neighbors.
At some point, sorting out my philosophy became less of a priority.</p>

<p>There must come a point where I’m comfortable working with the castle I’ve built, otherwise I’ll keep adding a brick here, breaking another there, and one day I’ll look around me and realize I’m in a half-built castle in a field of half-built castles, and I could have joined my neighbor in their half-built castle years ago.</p>

<blockquote>
  <p>If I know enough to know what I’m willing to risk being wrong about, what else do I need to figure out?</p>
</blockquote>

<h1 id="a-process-god">A Process God?</h1>

<p>Tripp Fuller has been instrumental in my philisophical and religious development, and is likely a large reason I still consider myself christian.</p>

<p>He gives me hope.</p>

<p>Tyson does too.</p>

<p>There are few of them, but their words go so far.</p>

<p>When I consider the God I encounter in Jesus, I think of the christian god of process theology, at least as I understand it.
If all experience that has ever been experienced were rolled up into one being, what would that being have to say?
Let’s call that being god.</p>

<blockquote>
  <p>What would God say to you?</p>
</blockquote>

<blockquote>
  <p>If God were to walk among us, who would God become?</p>
</blockquote>

<blockquote>
  <p>Who would that God shape us to be?</p>
</blockquote>

<h1 id="could-he-have-been-wrong">Could He Have Been Wrong?</h1>

<p>John Dominic Crosson’s picture of Jesus is compelling to me - we can’t look back at how 1st c people talked about Ceasar and not apply those same rules to Jesus.
If we talk about Ceasar being a god, we can talk about Jesus being God.
If we look at the Romans and consider their notion of Ceasar’s godhood as mythology, we must apply the same reasoning to Jesus.</p>

<p>This doesn’t discount the story of Jesus however.</p>

<h2 id="mythology-as-reality">Mythology as Reality</h2>

<p>The myth of Jesus has shaped all of reality to a staggering degree.
Myths shape reality more than factual information, and if that doesn’t ring true to you, you’re not paying attention.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[What is worth living for? How much of my life should be spent to figuring out what’s technically correct when I could be using my time to help the material conditions of my neighbor?]]></summary></entry><entry><title type="html">Common Platform on Abortion Rights</title><link href="/common-plat" rel="alternate" type="text/html" title="Common Platform on Abortion Rights" /><published>2022-05-07T00:00:00-07:00</published><updated>2022-05-07T00:00:00-07:00</updated><id>/Common-Platform</id><content type="html" xml:base="/common-plat"><![CDATA[<p>Reflections on the common ground between several organiztions with respect to the class struggle for abortion rights.</p>

<h2 id="-organized-labor-for-abortion-rights-">🛠 Organized Labor for Abortion Rights ✊</h2>

<p>It’s my impression that the common ground between all involved organizations is as follows:</p>

<blockquote>
  <p>We must organize our labor to win abortion rights and bodily autonomy.</p>
</blockquote>

<p>This involves organized labor in some form (likely a labor union with directly democratic principles) demanding abortion and healthcare rights to their constituency through the withholding of labor and class solidarity.</p>

<h2 id="script-draft">Script Draft</h2>

<p><em>Draft/disorganized thoughts about what I would say at a theoretical rally</em></p>

<h3 id="identity">Identity</h3>

<p>Hello everyone, my name is Asher and I’m with Boise Mutual Aid.
We’re a group aiming to support the community based on the principles of autonomy and mutual aid, as our namesake would suggest.</p>

<p>The recent legal developments around abortion oppress all of us uniquely.</p>

<p>The women among us are oppressed by it.</p>

<p>Those with uteruses are uniquely oppressed by it.</p>

<p>People of color, as well as our trans, neurodivergent, and less able-bodied neighbors are all uniquely oppressed by this, all to different degrees and by different means.</p>

<p>I am none of those things, but I’m here to tell you why it still matters to <em>you</em>.</p>

<h2 id="demonstration-of-common-ground">Demonstration of Common Ground</h2>

<p>The following sections demonstrate the support for this common platform based on the official or unofficial programs of each (potentially) involved organization.</p>

<h3 id="iar">IAR</h3>

<p>The IAR position is as follows:</p>

<blockquote>
  <p>Idaho Abortions Rights is a community of people who are seeking social change around the topic of abortion access in the state of Idaho.</p>

  <p>We believe that all people deserve access to legal, safe abortions including people who are BIPOC LGBTQ+ Disabled and live in rural areas. 
We believe that healthcare is a human right
We believe all people need comprehensive sex education and birth control access.</p>

  <p>Our mission to be a resource to the community and to speak up as an advocate for people seeking legal, safe abortions</p>

  <p>Restrictions on abortions cause death to people and loss of bodily autonomy.</p>

  <p>We know that our diverse perspectives make us stronger and we will continue to host demonstrations to bring this issue to the forefront and into the minds of our Idaho neighbors.</p>
</blockquote>

<p>IAR is a nonprofit, and thus has some restrictions on what positions it is allowed to take on.
IAR shares the position that this struggle for abortion rights is a class struggle, and that organized labor is the most effective strategy currently at our disposal to win abortion rights.</p>

<h3 id="rr">RR</h3>

<p>Point II of the Red Republican’s Program is as follows[1]:</p>

<blockquote>
  <p>We push for uncompromising commitments to a bill of rights, economic rights, workers’ rights, and the privacy and security of working people today.</p>
</blockquote>

<p>This includes free and universal healthcare (subpoint 1a of [1]).
There is no official statement in their program related to abortion rights, however from discussing this with RR representatives, abortions rights seems to fall directly into their program under 1a of [1].</p>

<h3>🏴</h3>

<p>One of the first groups to grow out of philosophical anarchism was <em>anarcho-syndicalism</em>, and was particularly popular and influencial in the mid to late 19th century around the time of the First International:</p>

<blockquote>
  <p>Most anarchist collectivists and many communists during the nineteenth century were syndicalists by implication, and this was particularly true of the anarchists in the First International.</p>

  <ul>
    <li>About Anarchism[4], p30</li>
  </ul>
</blockquote>

<p>Syndicalism may be summarized as <em>trade unionism</em>, which when translated to French, reads <em>syndicalisme</em>.</p>

<p>The WSM[6], a more contemporary Irish anarchist organization took the following position in their abortion rights position paper[5]:</p>

<blockquote>
  <p>The WSM stands for people having control over their own bodies: bodily autonomy. Part of that is control over our own reproductive health, including the ability to end a pregnancy if we choose to.</p>
</blockquote>

<h3 id="psl">PSL</h3>

<p>Bullet 2 of the <em>Socialism</em> section of part II of the DSA’s program[3] reads as follows (emphasis added):</p>

<blockquote>
  <p>It will be a right of every person in the United States to have a job with <strong><em>guaranteed union representation</em></strong> and full social benefits provided by the socialist government, including a pension, <strong><em>health care</em></strong>, workers’ compensation, paid parental and family leave for up to two years, paid sick and disability leave, a minimum of one month’s paid vacation, and at least 12 paid holidays.</p>
</blockquote>

<p>The PSL’s petition for the legalization of abortion rights reads as follows[2]:</p>

<blockquote>
  <p>Rich women have always had access to abortion; it is poor and working class women who stand to lose this fundamental right… 
Abortion bans are an attack on the rights of working class women… History shows that progressive legislation is won through struggle. We need a miltant national women’s rights movement.</p>
</blockquote>

<p>Although the <em>national</em> component of the labor struggle for abortion rights does not fall into the common platform established by this document, the PSL official does support <em>a</em> labor struggle for abortion rights.
The labor struggle for abortion rights in this document is not specifically national or local or non-heirarchical for this reason.</p>

<h2 id="references">References</h2>

<ol>
  <li><a href="https://www.redrepublicans.org/our-program" target="blank">Red Republicans National Program</a></li>
  <li><a href="https://www2.pslweb.org/abortion_rights_petition" target="blank">PSL Petition for the Legalization of Abortion Rights</a></li>
  <li><a href="https://pslweb.org/program/" target="blank">PSL Program</a></li>
  <li><em>About Anarchism</em> by Nicolas Walter</li>
  <li><a href="https://theanarchistlibrary.org/library/workers-solidarity-movement-abortion-rights-position-paper" target="blank"> Abortion Rights: A Workers Solidarity Movement Position Paper </a></li>
  <li><a href="http://www.wsm.ie/" target="blank">Workers Solidarity Movement</a></li>
</ol>]]></content><author><name></name></author><summary type="html"><![CDATA[Reflections on the common ground between several organiztions with respect to the class struggle for abortion rights.]]></summary></entry><entry><title type="html">Authority and Organization</title><link href="/pol-auth-org" rel="alternate" type="text/html" title="Authority and Organization" /><published>2022-05-05T00:00:00-07:00</published><updated>2022-05-05T00:00:00-07:00</updated><id>/Authority-and-Organization</id><content type="html" xml:base="/pol-auth-org"><![CDATA[<!--
pol: true
-->

<p>Reflections on authority, particularly contrasting implicit and explicit authority.</p>

<h2 id="-setting-the-stage">🍽 Setting the Stage</h2>

<p>Let us consider <em>Organization X</em>, a mutual aid collective and with the goal of improving the material conditions of the working class in their context.
The primary form of organization is through informal and unofficial communication between members, inspired by 19th century Anarchism, particularly Mutualism, Bakuninists, and the First International.</p>

<p>X may reflect organisational beliefs such as:</p>

<blockquote>
  <p>Instead of relying on the state, society should be organised by individuals entering into voluntary agreements with each other on a basis of equality and reciprocity.</p>

  <ul>
    <li>Nicolas Walter, <em>About Anarchism</em>[6], p25</li>
  </ul>
</blockquote>

<p>As expanded upon in libcom.org’s article on <em>Anarcho-Communism</em>[7], this mix of beliefs may be summarized as <em>the free association of producers and consumers</em>.</p>

<p>The key difference between X and the visions laid out by Bakunin, Malatesta, and their colleagues in the First International is that X <strong><em>does not have capacity for collective decision making</em></strong>.</p>

<p>A key feature of this organization is that many decisions are made in subgroups of X and disseminated ad-hoc to the rest of the members.
These subgroups are unelected and not subject to application nor accountability.</p>

<h2 id="-through-a-cybernetic-lens">👓 Through a Cybernetic Lens</h2>

<p>In examining the prevalence of implicit authority and decision making through the lens of Stafford Beer’s Viable System Model (VSM), I came away with one key insight:</p>

<blockquote>
  <p>Absence of explicit decision-making is not the <strong><em>absence of response</em></strong> to environmental stimuli, but the absence of a <strong><em>coordinated</em></strong> and <strong><em>effective</em></strong> response.</p>
</blockquote>

<center>
<img src="/images/politics/stafford-beer-vsm.jpeg" alt="Depiction of Stafford Beer's Viable System Model" />
</center>

<h3 id="-problem-formulation">🔎 Problem Formulation</h3>

<p>For any organization to perpetuate its own existence, it must react to its environment.
By virtue of X’s continued existence, it is, by definition, responding to its environment in some manner.
Should there be no collectively agreed-upon actions in response to stimuli, by Ashby’s Law of Requisite Variety[10], a variety of responses equivalent to the stimuli are <em>still produced by the organization</em>.
Organization X, being relatively large, has a large degree of incoming stimuli and therefor a large degree of response stimuli.
Where, then, do the variety of responses come from if not from an official stance (whether voted on or handed down from leadership)?</p>

<p>The only source of response variety is the individual facing the variety.</p>

<p>Say a member of X is approached by a representative of organization Y, whose platform has about a 50% overlap with the (implicit) platform of X.
Members of Y would like to collaborate with members of X on a particular event.
This introduces environmental variety to the viable system of organization X.
The system 1 of X is now functionally the individual member approached by the member of Y, as this member is the only one able to respond to stimuli, given that voting and collective decision-making are off the table.
Because there is no organizational capacity to perform operations of systems 2 and 3, the individual must also take on these functions and respond according to their own perceptions of organization Y.</p>

<p>System 3 coordinates between systems 1 and 2 and directions reactions to the environment.
In this case, the individual member of X is performing operations of systems 1, 2, and 3 for organization X whether other members of X would support or consent to those actions if they knew about them.
This introduces a sort of tyranny over all members of X - they are cut off from any decision-making about the direction of X.
Over time, many of these small interactions accumulate to form the long-term personality and character of X, meaning that individual members of X are performing system 4 and 5 operations as well - all without the consent and support of the majority of the members of X.</p>

<h3 id="-subgroups">🙋 Subgroups</h3>

<p>Another drawback of the decision-making power of the unelected subgroups of X is the disconnect between the entirety of the membership of X and the subgroups, which are able to perform functions of systems 3-5.
Because the subgroups are unofficial and not accountable to the entirety of the membership of X, they cannot effectively take into account the stimuli being fed into X by the environment.</p>

<p>The members of X act as systems 1 whenever they perform mutual aid or talk with non-members: they intake stimuli from the environment and elicit some response.
However because the subgroups are making decisions as systems 3 without direct input from the various systems 1 (the members), organization X is <em>provably</em> unable to make informed decisions in response to the environment - they are not accounting for all of the input variety, and therefore are not responding in like variety.</p>

<h3 id="-collective-decision-making">🏫 Collective Decision-Making</h3>

<p>Without a mechanism for X to make decisions about its members behavior and the organization’s platform, total control of the organization is given not to the individuals the comprise organization, but to the circumstances in which members of X are presented with environmental stimuli.
In those circumstances, without the consent or support of the organization, functions of systems 1 through 5 are all performed - the character of X is left to chance.</p>

<p>Let the reader note that this is not in the spirit of the 19th century political theorists that inspire X - in the free association of producers and consumers, the most common organization of decision making is by direct democracy and occasional representation subject to instant recall:</p>

<blockquote>
  <p>…[non anarchists] are sure that anarchy means order which arises spontaneously and that anarchists do not want organisation.
This is the reverse of the truth.
Anarchists actually want much more organisation, though organisation without authority…
A moment’s thought will show that when compulsion is replaced by consent there will hav eto be more discussion and planning, not less.
Everyone who is involved in a decision will be able to take part in making it… every decision will be made afresh.</p>

  <ul>
    <li>Nicolas Walter, <em>About Anarchism</em>[6], p12</li>
  </ul>
</blockquote>

<p>It is intrinsic to the spirit of anarchism that members of an organization partake consensually, something not possible in X the way it is presently structured.
The history of anarchist organization is rich with examples of communes, collectives, councils, and other structures.
The common thread is consensual participation and individual representation.</p>

<p>What historical examples can be applied to X?</p>

<h2 id="-differences-between-x-and-successful-predecessors">📖 Differences Between X and Successful Predecessors</h2>

<p>Organizational strategies of some societies in which 19th century Anarchism was most successfully applied are contrasted with that of organization X below.</p>

<h3 id="rojava">Rojava</h3>

<p>In Rojava, citizens are reprented directly in neighborhood councils, and vote for instantly-recallable representatives to attend city and regional councils to form policy in larger health, defence, economic, and education committees (<em>The Communes of Rojava</em>[12] at 1:30).</p>

<p>The smallest unit of democracy is direct, and higher-level policy is formed through representative democracy.</p>

<h3 id="spanish-revolution">Spanish Revolution</h3>

<h3 id="paris-commune">Paris Commune</h3>

<h2 id="references-and-links">References and Links</h2>

<ol>
  <li><a href="https://www.researchgate.net/publication/318993399_The_Ladder_of_Cyber-Subsidiarity_as_a_Mediation_between_the_Autonomous_Citizens_and_the_Commons" target="blank"> The Ladder of Cyber-Subsidiarity as a Mediation between the Autonomous Citizens and the Commons by José María Díaz Nafría </a></li>
  <li><a href="https://www.researchgate.net/publication/200025911_The_Brain_of_the_Firm" target="blank">Brain of the Firm by Stafford Beer</a></li>
  <li><a href="https://plato.stanford.edu/entries/anarchism/#PoliAnar" target="blank">Anarchism entry in Stanford Encycolpedia of Philosophy</a></li>
  <li><a href="https://www.marxists.org/archive/lenin/works/1917/apr/09.htm" target="blank">The Dual Power by Lenin</a></li>
  <li><a href="https://libcom.org/article/1936-1939-spanish-civil-war-and-revolution" target="blank">libcom.org: The Spanish Civil War and Revolution</a></li>
  <li><em>About Anarchism</em> by Nicolas Walter</li>
  <li><a href="https://libcom.org/library/anarcho-communism" target="blank">libcom.org: Anarcho-Communism</a></li>
  <li><a href="https://isreview.org/issue/108/examing-revolution-rojava/index.html" target="blank">Examing the revolution in Rojava</a></li>
  <li><a href="http://new-compass.net/articles/rojavas-communes-and-councils" target="blank">Rojava’s Communes and Councils</a></li>
  <li><a href="https://www.businessballs.com/strategy-innovation/ashbys-law-of-requisite-variety/" target="blank">Ashby’s Law of Requisite Variety</a></li>
  <li><a href="https://www.marxists.org/archive/marx/works/1872/10/authority.htm" target="blank"><em>On Authority</em> by Karl Marx</a></li>
  <li><a href="https://www.youtube.com/watch?v=cDnenjIdnnE&amp;ab_channel=NeighborDemocracy" target="blank">The Communes of Rojava: A Model In Societal Self Direction</a></li>
</ol>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">BQN and Reflections on the Joy of Programming</title><link href="/bqn-reflections" rel="alternate" type="text/html" title="BQN and Reflections on the Joy of Programming" /><published>2022-05-02T00:00:00-07:00</published><updated>2022-05-02T00:00:00-07:00</updated><id>/BQN-reflections</id><content type="html" xml:base="/bqn-reflections"><![CDATA[<p>Solve a leetcode problem in BQN and I rant about the joy of programming.</p>

<h2 id="leetcode">Leetcode</h2>

<p><a href="https://leetcode.com/problems/set-matrix-zeroes" target="blank">
  The Leetcode problem is “Set Matrix Zeroes”
</a>
where we’re tasked with setting rows and columns of a matrix that contain zero to be all zeroes.</p>

<h2 id="bqn-solution">BQN Solution</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   i←⟨
     3‿4⥊⟨0,1,3,0,3,4,5,2,1,3,1,5⟩
     3‿3⥊⟨1,1,1,1,0,1,1,1,1⟩
   ⟩

   Z ← {
     bm←0=𝕩
     a←∨` ∨`⌾⌽ bm
     b←(∨`˘) ((∨`˘)⌾(⌽˘)) bm
     𝕩×a¬∘∨b
   }
   
   ⟨"#1","#2"⟩∾i≍Z¨i
┌─                       
╵ "#1"        "#2"       
  ┌─          ┌─         
  ╵ 0 1 3 0   ╵ 1 1 1    
    3 4 5 2     1 0 1    
    1 3 1 5     1 1 1    
            ┘         ┘  
  ┌─          ┌─         
  ╵ 0 0 0 0   ╵ 1 0 1    
    0 4 5 0     0 0 0    
    0 3 1 0     1 0 1    
            ┘         ┘  
                        ┘
</code></pre></div></div>

<p>Some other solutions from the BQN Matrix chat room:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   ⊢×0≠∧˝˘∧⌜∧˝           # Marshall &amp; Dzaima (tacit!)
   (≠⥊∧´)˘{𝕩×(𝔽⌾⍉∧𝔽)0≠𝕩} # Dzaima &amp; Rampoina
   {𝕩×(∧˝˘∧≢⥊∧˝)0≠𝕩}     # Dzaima
</code></pre></div></div>

<h2 id="on-the-joy-of-programming">On the Joy of Programming</h2>

<p>It’s been a few months since I’ve written BQN or APL, so I feel like I’m looking at the language family with fresh eyes.</p>

<p>I was struck by the resemblance between solving this leetcode problem and creating art:</p>

<ol>
  <li>I know I’m not the best at either, and many, <em>many</em> people can write more elegant BQN and more elegant poetry than I can (for example)</li>
  <li>I can thoroughly enjoy both when detached from any performance metrics - the process is far more valuable to me than the end-product</li>
  <li>both can be deeply social actions - sharing your painting with someone and discussing my solution with the BQN chat room are both social and exciting. Even if someone comes back with a more wonderful painting or more terse solution, I enjoy the social interaction just as much.</li>
</ol>

<p>I stumbled upon this thread on twitter describing how Kurt Vonnegut responded to a letter from a high school English student asking for life advice.
In short, his response was to do art and enjoy the process of becoming who you are.</p>

<center>
  <blockquote class="twitter-tweet"><p lang="en" dir="ltr">Tear it up into teeny-weeny pieces, and discard them into widely separated trash receptacles. You will find that you have already been gloriously rewarded for your poem. You have experienced becoming, learned a lot more about what’s inside you, and you have made your soul grow.</p>&mdash; Gabe Hudson (@gabehudson) <a href="https://twitter.com/gabehudson/status/1521139749322477569?ref_src=twsrc%5Etfw">May 2, 2022</a></blockquote> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</center>

<p>Creating art seems to be central to the importance of life as far as I can tell.</p>

<p><a href="https://www.arraycast.com/episodes/episode26-stevan-apter" target="blank">
  The most recent episode of ArrayCast with Stevan Apter dipped into this as well when the panelists discussed the aesthetic of writing APL.
</a>
In some ways they were a little reserved about saying they enjoy APL at least in part due to the aesthetic of the language.
I don’t think this is something to shy away from - if we can’t appreciate the beauty of what we do, why are we doing it at all?</p>

<p>I loved working through this rather simple problem.</p>

<p>I loved the process of visualizing the inputs, of thinking through possible solutions while going about my day.</p>

<p>I loved taking my solution to the BQN forum for more gifted and practiced BQN-ers to find far simpler and more elegant solutions than mine.</p>

<p>The whole process felt like writing a poem, and at the end I’m rewarded by sharing this poem with others, seeing what they come up with, and comparing their thoughts with mine.</p>

<p>There is a unique joy and beauty I find in BQN (and APL more broadly), and that’s what keeps me coming back.</p>

<p>As Kurt Vonnegut pointed out, what else could be a more worthwhile way to spend my time?</p>

<p>Please, give it a try, and fall in love with the community while you’re at it.</p>

<!---
## C++ Solution

I'll also include my C++ solution for kicks and giggles:

```cpp
void setZeroes(vector<vector<int>>& m) {
  const auto rs = m.size(), cs = m[0].size();
  vector<int> rows, cols;
  for (int i=0; i<rs; i++)
    for (int j=0; j<cs; j++)
      if (0 == m[i][j]) {
        rows.push_back(i);
        cols.push_back(j);
      }
  for (const auto r : rows)
    std::fill(m[r].begin(), m[r].end(), 0);
  for (const auto c : cols)
    for (auto& r : m)
      r[c] = 0;
}
```
-->]]></content><author><name></name></author><category term="BQN, c++" /><summary type="html"><![CDATA[Solve a leetcode problem in BQN and I rant about the joy of programming.]]></summary></entry><entry><title type="html">JAABIBP (Just Another ABI Blog Post)</title><link href="/jaabibp" rel="alternate" type="text/html" title="JAABIBP (Just Another ABI Blog Post)" /><published>2022-03-14T00:00:00-07:00</published><updated>2022-03-14T00:00:00-07:00</updated><id>/JAABIBP</id><content type="html" xml:base="/jaabibp"><![CDATA[<p>ABI breakage is a hot topic. Let’s look at some ways C++ handles it, and how that compares to the WG14 <code class="language-plaintext highlighter-rouge">_Alias</code> proposal.</p>

<p><em>NOTE: This is probably the least educated article about ABI breakage yet. You should really watch <a href="https://youtu.be/By7b19YIv8Q">Jason Turner’s youtube video</a> or read <a href="https://thephd.dev/to-save-c-we-must-save-abi-fixing-c-function-abi">JeanHeyd Meneide’s blog posts</a>🙃</em></p>

<font size="-1">
  <em>
    These views do not in any way represent those of NVIDIA or any other organization or institution that I am professionally associated with.
    These views are entirely my own.
  </em>
</font>

<p>After reading about transparent aliasing in <a href="https://thephd.dev/to-save-c-we-must-save-abi-fixing-c-function-abi">this blog post from JeanHeyd Meneide</a>, I had to play around with it in Godbolt and rave about its coolness on the Cursed Bird Site.
Sean Parent rightly pointed out that this super neat proposal from JeanHeyd acomplishes pretty much the same thing as <code class="language-plaintext highlighter-rouge">inline namespace</code> in C++.</p>

<p><br /></p>

<center>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Isn't this what inline namespaces are for in C++? (prior, they were \_\_strong namespaces). I'm surprised these aren't even mentioned in the proposal. Maybe an abbreviated form of inline namespaces for C could be used. ;-)</p>&mdash; Sean Parent (@SeanParent) <a href="https://twitter.com/SeanParent/status/1503471201833738240?ref_src=twsrc%5Etfw">March 14, 2022</a></blockquote> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</center>

<p><br /></p>

<p>Let’s talk about that.</p>

<h2 id="problem-formulation">Problem Formulation</h2>

<p>Let’s say you build executable A which dynamically links against library B.</p>

<p>Library B might look like this:</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// B.hpp</span>
<span class="k">namespace</span> <span class="n">B</span> <span class="p">{</span>
<span class="kt">int</span> <span class="n">answer</span><span class="p">();</span>
<span class="p">}</span>

<span class="c1">// B.cpp</span>
<span class="cp">#include</span> <span class="cpf">&lt;B.hpp&gt;</span><span class="cp">
</span><span class="kt">int</span> <span class="n">B</span><span class="o">::</span><span class="n">answer</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="mi">42</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>while executable A might look like this:</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;B.hpp&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">B</span><span class="o">::</span><span class="n">answer</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<p>Some time has passed since library B was released, and now the authors have decided that <code class="language-plaintext highlighter-rouge">answer</code> can be 30% faster if it uses <code class="language-plaintext highlighter-rouge">long double</code> instead of <code class="language-plaintext highlighter-rouge">int</code>s.
How cool!</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// B.hpp</span>
<span class="k">namespace</span> <span class="n">B</span> <span class="p">{</span>
<span class="kt">long</span> <span class="kt">double</span> <span class="n">answer</span><span class="p">();</span>
<span class="p">}</span>

<span class="c1">// B.cpp</span>
<span class="cp">#include</span> <span class="cpf">&lt;B.hpp&gt;</span><span class="cp">
</span><span class="kt">long</span> <span class="kt">double</span> <span class="n">B</span><span class="o">::</span><span class="n">answer</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="mi">42</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Wow, so fast! 🚀</p>

<p>If you rebuild B without rebuilding A however, A will be expecting the <code class="language-plaintext highlighter-rouge">answer</code>’s return value to be an int (4 bytes on my system) even though <code class="language-plaintext highlighter-rouge">B::answer</code> now returns a <code class="language-plaintext highlighter-rouge">long double</code> (8 bytes on my system).
When dynamically linking to the original B library, A unsurprisingly prints <code class="language-plaintext highlighter-rouge">42</code>.
When dynamically linking to the updated B library however, A prints the following:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>./A
<span class="go">83575344
</span><span class="gp">$</span><span class="w"> </span><span class="c"># 😨 uh oh...</span>
</code></pre></div></div>

<p>This disagreement between the program and the library at the binary level wreaks all sorts of havoc.</p>

<p><a href="https://thephd.dev/binary-banshees-digital-demons-abi-c-c++-help-me-god-please#abi-even-simpler">This section of JeanHeyd’s post gives a much better illustration.</a></p>

<h2 id="comparing-inline-namespace-with-_alias-and-co">Comparing <code class="language-plaintext highlighter-rouge">inline namespace</code> with <code class="language-plaintext highlighter-rouge">_Alias</code> and co</h2>

<h2 id="why-do-some-want-to-break-it">Why do some want to break it?</h2>

<blockquote>
  <p>Q: Why don’t you just rebuild after an ABI change?
A1: Are you rebuilding the standard library too?
Many people will recommend not passing standard library types around, and not throwing exceptions across shared library boundaries. They often forget that at least one very commonly used shared library does exactly that… your C++ standard library.</p>

  <p>On many platforms, there is usually a system C++ standard library. If you want to use that, then you need to deal with standard library types and exceptions going across shared library boundaries. If OS version N+1 breaks ABI in the system C++ standard library, the program you shipped and tested with for OS version N will not work on the upgraded OS until you rebuild.</p>
</blockquote>

<h2 id="links">Links</h2>

<ol>
  <li><a href="https://thephd.dev/binary-banshees-digital-demons-abi-c-c++-help-me-god-please">Binary Banshees and Digital Demons (JeanHeyd Meneide)</a></li>
  <li><a href="https://thephd.dev/to-save-c-we-must-save-abi-fixing-c-function-abi">To Save C, We Must Save ABI (JeanHeyd Meneide)</a></li>
  <li><a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2028r0.pdf">Titus Winters paper on ABI</a></li>
  <li><a href="https://www.reddit.com/r/cpp/comments/fc2qqv/abi_breaks_not_just_about_rebuilding/">Ben Craig’s Reddit post on ABI breakage</a></li>
  <li><a href="https://www.reddit.com/r/cpp/comments/fc2qqv/abi_breaks_not_just_about_rebuilding/fj9dfg1/">Johnathan Wakely’s comment about ABI on Reddit</a></li>
  <li><a href="https://cor3ntin.github.io/posts/abi/">Corentin’s blog post on ABI</a></li>
  <li><a href="https://www.youtube.com/watch?v=By7b19YIv8Q&amp;ab_channel=C%E1%90%A9%E1%90%A9WeeklyWithJasonTurner">C++ Weekly - Ep 270 - Break ABI to Save C++</a></li>
</ol>]]></content><author><name></name></author><category term="c, c++" /><summary type="html"><![CDATA[ABI breakage is a hot topic. Let’s look at some ways C++ handles it, and how that compares to the WG14 _Alias proposal.]]></summary></entry></feed>